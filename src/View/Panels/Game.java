/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View.Panels;

import Boggle.BoggleBoard;
import Boggle.BoggleSolver;
import Checker.CheckAnswers;
import Model.Dice.ClassicDiceSet;
import Model.Dice.DiceSet;
import Trie.Dictionary;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import Controller.Audio.AudioService;
import javax.sound.sampled.Clip;
/**
 *
 * @author El Gato
 */
public class Game extends javax.swing.JPanel {

    BoggleBoard boggleboard;
    BoggleSolver bogglesolver;
    private BoggleNode[][] boggleboard2;
    LinkedList<BoggleNode> chain;
    static int score;
    private int CTR_SCORE_EVERY_10;
    private int CTR_SCORE_EVERY_15;
    String playerName = new String();
    
    //audio
    private Clip addTime, diceClicked, levelUp, timeLeft;
    
    //no need to make one again
    Dictionary reference;
    DiceSet diceset;

    //shuffleProperties
    static int noOfShuffles;

    //FoundWordsProperties
    private String guess_word;
    static String wordsFound = new String();
    List<String> result = new ArrayList<>();
    //List<String> boardWords = new ArrayList<>();
    List<String> boardWords = new LinkedList<>();
    List<String> listFound = new ArrayList<>();

    //StopWatchProperties.
    private int milliseconds = 0;
    private int seconds = 0;
    private short minutes = 2;
    private DecimalFormat timeFormatter;
    private Timer timer;
    private boolean flag = false;

    //hintProperties
    private Random rand;
    private int randNo;
    static int noOfHints;

    /**
     * Creates new form Menu
     */
    public Game() throws FileNotFoundException {
        score = 0;
        CTR_SCORE_EVERY_10 = 0;
        CTR_SCORE_EVERY_15 = 0;
        noOfHints = 3;
        noOfShuffles = 3;
        rand = new Random();
        chain = new LinkedList<BoggleNode>();
        formatTimer();
        initComponents();
        generateNewBoggleBoard2();
        neighborAdder();
        guess_word = new String();
        fileRead();
        addTime = AudioService.createClip("src/Model/Resources/Audio/addTime.wav");
        diceClicked = AudioService.createClip("src/Model/Resources/Audio/diceClicked.wav");
        levelUp = AudioService.createClip("src/Model/Resources/Audio/levelUp.wav");
        timeLeft = AudioService.createClip("src/Model/Resources/Audio/timeLeft.wav");
    }
    
    public void initialize() throws FileNotFoundException{
        createBoggleBoard();
        fillDiceWithLetters(boggleboard);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuPanel = new javax.swing.JPanel();
        wordPane = new javax.swing.JScrollPane();
        Words = new javax.swing.JTextArea();
        A2 = new javax.swing.JToggleButton();
        A3 = new javax.swing.JToggleButton();
        A4 = new javax.swing.JToggleButton();
        A1 = new javax.swing.JToggleButton();
        B2 = new javax.swing.JToggleButton();
        B1 = new javax.swing.JToggleButton();
        B3 = new javax.swing.JToggleButton();
        B4 = new javax.swing.JToggleButton();
        D4 = new javax.swing.JToggleButton();
        C1 = new javax.swing.JToggleButton();
        D2 = new javax.swing.JToggleButton();
        D3 = new javax.swing.JToggleButton();
        D1 = new javax.swing.JToggleButton();
        C3 = new javax.swing.JToggleButton();
        C4 = new javax.swing.JToggleButton();
        C2 = new javax.swing.JToggleButton();
        resetButton = new javax.swing.JButton();
        hintButton = new javax.swing.JButton();
        shuffleButton = new javax.swing.JButton();
        wordField = new javax.swing.JTextField();
        tryWord = new javax.swing.JButton();
        scoreField = new javax.swing.JTextField();
        timeRunning = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        diceHolder = new javax.swing.JLabel();
        menuBG = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(520, 440));

        menuPanel.setMaximumSize(new java.awt.Dimension(520, 550));
        menuPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Words.setEditable(false);
        Words.setColumns(20);
        Words.setRows(5);
        Words.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "Words"));
        wordPane.setViewportView(Words);

        menuPanel.add(wordPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 20, 180, 300));

        A2.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        A2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A2ActionPerformed(evt);
            }
        });
        menuPanel.add(A2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 70, 70));

        A3.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        A3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A3ActionPerformed(evt);
            }
        });
        menuPanel.add(A3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, 70, 70));

        A4.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        A4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A4ActionPerformed(evt);
            }
        });
        menuPanel.add(A4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 70, 70));

        A1.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        A1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                A1ActionPerformed(evt);
            }
        });
        menuPanel.add(A1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, 70, 70));

        B2.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        B2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B2ActionPerformed(evt);
            }
        });
        menuPanel.add(B2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 97, 70, 70));

        B1.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        B1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B1ActionPerformed(evt);
            }
        });
        menuPanel.add(B1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 97, 70, 70));

        B3.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        B3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B3ActionPerformed(evt);
            }
        });
        menuPanel.add(B3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 97, 70, 70));

        B4.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        B4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B4ActionPerformed(evt);
            }
        });
        menuPanel.add(B4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 97, 70, 70));

        D4.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        D4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D4ActionPerformed(evt);
            }
        });
        menuPanel.add(D4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 250, 70, 70));

        C1.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        C1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C1ActionPerformed(evt);
            }
        });
        menuPanel.add(C1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 173, 70, 70));

        D2.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        D2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D2ActionPerformed(evt);
            }
        });
        menuPanel.add(D2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 250, 70, 70));

        D3.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        D3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D3ActionPerformed(evt);
            }
        });
        menuPanel.add(D3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 250, 70, 70));

        D1.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        D1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                D1ActionPerformed(evt);
            }
        });
        menuPanel.add(D1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 250, 70, 70));

        C3.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        C3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C3ActionPerformed(evt);
            }
        });
        menuPanel.add(C3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 173, 70, 70));

        C4.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        C4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C4ActionPerformed(evt);
            }
        });
        menuPanel.add(C4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 173, 70, 70));

        C2.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        C2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                C2ActionPerformed(evt);
            }
        });
        menuPanel.add(C2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 173, 70, 70));

        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Model/Resources/ResetNormal.png"))); // NOI18N
        resetButton.setBorderPainted(false);
        resetButton.setContentAreaFilled(false);
        resetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resetButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resetButtonMouseReleased(evt);
            }
        });
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        menuPanel.add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 450, 150, 40));

        hintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Model/Resources/HintNormal.png"))); // NOI18N
        hintButton.setBorderPainted(false);
        hintButton.setContentAreaFilled(false);
        hintButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                hintButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                hintButtonMouseReleased(evt);
            }
        });
        hintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintButtonActionPerformed(evt);
            }
        });
        menuPanel.add(hintButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 490, 150, 50));

        shuffleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Model/Resources/ShuffleNormal.png"))); // NOI18N
        shuffleButton.setBorderPainted(false);
        shuffleButton.setContentAreaFilled(false);
        shuffleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                shuffleButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                shuffleButtonMouseReleased(evt);
            }
        });
        shuffleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleButtonActionPerformed(evt);
            }
        });
        menuPanel.add(shuffleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, 150, 40));

        wordField.setEditable(false);
        menuPanel.add(wordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 340, 240, 30));

        tryWord.setFont(new java.awt.Font("Boggle", 0, 11)); // NOI18N
        tryWord.setText("Try This");
        tryWord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tryWordActionPerformed(evt);
            }
        });
        menuPanel.add(tryWord, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 340, 80, 30));

        scoreField.setEditable(false);
        scoreField.setFont(new java.awt.Font("Boggle", 0, 24)); // NOI18N
        scoreField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        menuPanel.add(scoreField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 160, 40));

        timeRunning.setFont(new java.awt.Font("Boggle", 0, 18)); // NOI18N
        menuPanel.add(timeRunning, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 400, 80, 40));

        timeLabel.setFont(new java.awt.Font("Boggle", 0, 24)); // NOI18N
        timeLabel.setText("Time:");
        menuPanel.add(timeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 380, 60, 30));

        scoreLabel.setFont(new java.awt.Font("Boggle", 0, 24)); // NOI18N
        scoreLabel.setText("Score:");
        menuPanel.add(scoreLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 70, 30));

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Model/Resources/logo.png"))); // NOI18N
        menuPanel.add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 390, 250, 150));

        diceHolder.setFont(new java.awt.Font("Boggle", 0, 36)); // NOI18N
        diceHolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Model/Resources/Board.png"))); // NOI18N
        menuPanel.add(diceHolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 330, 320));

        menuBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Model/Resources/yeah_boy.jpg"))); // NOI18N
        menuBG.setMinimumSize(new java.awt.Dimension(520, 550));
        menuBG.setPreferredSize(new java.awt.Dimension(520, 550));
        menuPanel.add(menuBG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void A1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A1ActionPerformed
        if (boggleboard2[0][0].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[0][0]);
            boggleboard2[0][0].isPressed = true;
            guess_word = guess_word.concat(A1.getText());
            updateWordField();
            chain.add(boggleboard2[0][0]);
        } else {
            letterDeconcatinator(boggleboard2[0][0]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_A1ActionPerformed

    private void A2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A2ActionPerformed
        if (boggleboard2[0][1].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[0][1]);
            boggleboard2[0][1].isPressed = true;
            guess_word = guess_word.concat(A2.getText());
            updateWordField();
            chain.add(boggleboard2[0][1]);
        } else {
            letterDeconcatinator(boggleboard2[0][1]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_A2ActionPerformed

    private void A3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A3ActionPerformed
        if (boggleboard2[0][2].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[0][2]);
            boggleboard2[0][2].isPressed = true;
            guess_word = guess_word.concat(A3.getText());
            updateWordField();
            chain.add(boggleboard2[0][2]);
        } else {
            letterDeconcatinator(boggleboard2[0][2]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_A3ActionPerformed

    private void A4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_A4ActionPerformed
        if (boggleboard2[0][3].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[0][3]);
            boggleboard2[0][3].isPressed = true;
            guess_word = guess_word.concat(A4.getText());
            updateWordField();
            chain.add(boggleboard2[0][3]);
        } else {
            letterDeconcatinator(boggleboard2[0][3]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_A4ActionPerformed

    private void B1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B1ActionPerformed
        if (boggleboard2[1][0].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[1][0]);
            boggleboard2[1][0].isPressed = true;
            guess_word = guess_word.concat(B1.getText());
            updateWordField();
            chain.add(boggleboard2[1][0]);
        } else {
            letterDeconcatinator(boggleboard2[1][0]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_B1ActionPerformed

    private void B2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B2ActionPerformed
        if (boggleboard2[1][1].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[1][1]);
            boggleboard2[1][1].isPressed = true;
            guess_word = guess_word.concat(B2.getText());
            updateWordField();
            chain.add(boggleboard2[1][1]);
        } else {
            letterDeconcatinator(boggleboard2[1][1]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_B2ActionPerformed

    private void B3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B3ActionPerformed
        if (boggleboard2[1][2].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[1][2]);
            boggleboard2[1][2].isPressed = true;
            guess_word = guess_word.concat(B3.getText());
            updateWordField();
            chain.add(boggleboard2[1][2]);
        } else {
            letterDeconcatinator(boggleboard2[1][2]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_B3ActionPerformed

    private void B4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B4ActionPerformed
        if (boggleboard2[1][3].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[1][3]);
            boggleboard2[1][3].isPressed = true;
            guess_word = guess_word.concat(B4.getText());
            updateWordField();
            chain.add(boggleboard2[1][3]);
        } else {
            letterDeconcatinator(boggleboard2[1][3]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_B4ActionPerformed

    private void C1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C1ActionPerformed
        if (boggleboard2[2][0].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[2][0]);
            boggleboard2[2][0].isPressed = true;
            guess_word = guess_word.concat(C1.getText());
            updateWordField();
            chain.add(boggleboard2[2][0]);
        } else {
            letterDeconcatinator(boggleboard2[2][0]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_C1ActionPerformed

    private void C2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C2ActionPerformed
        if (boggleboard2[2][1].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[2][1]);
            boggleboard2[2][1].isPressed = true;
            guess_word = guess_word.concat(C2.getText());
            updateWordField();
            chain.add(boggleboard2[2][1]);
        } else {
            letterDeconcatinator(boggleboard2[2][1]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_C2ActionPerformed

    private void C3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C3ActionPerformed
        if (boggleboard2[2][2].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[2][2]);
            boggleboard2[2][2].isPressed = true;
            guess_word = guess_word.concat(C3.getText());
            updateWordField();
            chain.add(boggleboard2[2][2]);
        } else {
            letterDeconcatinator(boggleboard2[2][2]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_C3ActionPerformed

    private void C4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_C4ActionPerformed
        if (boggleboard2[2][3].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[2][3]);
            boggleboard2[2][3].isPressed = true;
            guess_word = guess_word.concat(C4.getText());
            updateWordField();
            chain.add(boggleboard2[2][3]);
        } else {
            letterDeconcatinator(boggleboard2[2][3]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_C4ActionPerformed

    private void D1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D1ActionPerformed
        if (boggleboard2[3][0].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[3][0]);
            boggleboard2[3][0].isPressed = true;
            guess_word = guess_word.concat(D1.getText());
            updateWordField();
            chain.add(boggleboard2[3][0]);
        } else {
            letterDeconcatinator(boggleboard2[3][0]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_D1ActionPerformed

    private void D2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D2ActionPerformed
        if (boggleboard2[3][1].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[3][1]);
            boggleboard2[3][1].isPressed = true;
            guess_word = guess_word.concat(D2.getText());
            updateWordField();
            chain.add(boggleboard2[3][1]);
        } else {
            letterDeconcatinator(boggleboard2[3][1]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_D2ActionPerformed

    private void D3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D3ActionPerformed
        if (boggleboard2[3][2].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[3][2]);
            boggleboard2[3][2].isPressed = true;
            guess_word = guess_word.concat(D3.getText());
            updateWordField();
            chain.add(boggleboard2[3][2]);
        } else {
            letterDeconcatinator(boggleboard2[3][2]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_D3ActionPerformed

    private void D4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_D4ActionPerformed
        if (boggleboard2[3][3].isPressed == false) {
            turnOffButtonsActivated(boggleboard2[3][3]);
            boggleboard2[3][3].isPressed = true;
            guess_word = guess_word.concat(D4.getText());
            updateWordField();
            chain.add(boggleboard2[3][3]);
        } else {
            letterDeconcatinator(boggleboard2[3][3]);
        }
        AudioService.normalSoundPlay(diceClicked);
    }//GEN-LAST:event_D4ActionPerformed

    private void tryWordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tryWordActionPerformed
        if (checkWord()) {
            if (!listFound.contains(guess_word)) {
                listFound.add(guess_word);
                printInField();
                Words.setText(wordsFound);
                addScore();
                resetAllKey();
            } else {

                JOptionPane.showMessageDialog(new JFrame(),
                        "You GUESSED That Word Already!",
                        "WORD GUESSED",
                        JOptionPane.ERROR_MESSAGE);

                resetAllKey();
            }
        } else {
            //new WrongAnswer().setVisible(true);
            JOptionPane.showMessageDialog(null, new WrongAnswerKid(), "Word Not Found in Dictionary", JOptionPane.PLAIN_MESSAGE);
            resetAllKey();
            updateWordField();
        }
    }//GEN-LAST:event_tryWordActionPerformed

    private void shuffleButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shuffleButtonMousePressed

        shuffleButton.setIcon(new ImageIcon(getClass().getResource("/Model/Resources/ShufflePressed.png")));
    }//GEN-LAST:event_shuffleButtonMousePressed

    private void shuffleButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shuffleButtonMouseReleased
        if (noOfShuffles > 0) {
            shuffleButton.setIcon(new ImageIcon(getClass().getResource("/Model/Resources/ShuffleNormal.png")));
        } else {
            shuffleButton.setIcon(new ImageIcon(getClass().getResource("/Model/Resources/ShuffleHover.png")));
        }
    }//GEN-LAST:event_shuffleButtonMouseReleased

    private void shuffleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleButtonActionPerformed
        if (noOfShuffles > 0) {
            try {
                //createBoggleBoard();
                shufboard();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);
            }
            fillDiceWithLetters(boggleboard);
            noOfShuffles--;
        } else {
            shuffleButton.setIcon(new ImageIcon(getClass().getResource("/Model/Resources/ShuffleHover.png")));
            JOptionPane.showMessageDialog(new JFrame(),
                    "No more Shuffles Kid",
                    "No Shuffles",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_shuffleButtonActionPerformed

    private void resetButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetButtonMousePressed
        resetButton.setIcon(new ImageIcon(getClass().getResource("/Model/Resources/ResetPressed.png")));
    }//GEN-LAST:event_resetButtonMousePressed

    private void resetButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetButtonMouseReleased
        resetButton.setIcon(new ImageIcon(getClass().getResource("/Model/Resources/ResetNormal.png")));
    }//GEN-LAST:event_resetButtonMouseReleased

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        resetAllKey();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void hintButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hintButtonMousePressed
        hintButton.setIcon(new ImageIcon(getClass().getResource("/Model/Resources/HintPressed.png")));
    }//GEN-LAST:event_hintButtonMousePressed

    private void hintButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hintButtonMouseReleased
        if (noOfHints > 0) {
            hintButton.setIcon(new ImageIcon(getClass().getResource("/Model/Resources/HintNormal.png")));
        } else {
            hintButton.setIcon(new ImageIcon(getClass().getResource("/Model/Resources/HintHover.png")));
        }
    }//GEN-LAST:event_hintButtonMouseReleased

    private void hintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintButtonActionPerformed

        if (noOfHints > 0) {
            randNo = rand.nextInt(boardWords.size());
            
            JOptionPane.showMessageDialog(new JFrame(), "Word: " + boardWords.get(randNo), "Secret Message :*", JOptionPane.WARNING_MESSAGE);
            noOfHints--;
        } else {
            JOptionPane.showMessageDialog(new JFrame(),
                    "No more Hints Kid",
                    "No Hints",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_hintButtonActionPerformed

    private void generateNewBoggleBoard2() {
        this.boggleboard2 = new BoggleNode[4][4];
    }
    
    private void gameOver() throws FileNotFoundException {
        String s = (String) JOptionPane.showInputDialog(
                new JFrame(),
                "Name:",
                "High Score",
                JOptionPane.PLAIN_MESSAGE,
                null,
                null,
                "Paks");
        int choice = JOptionPane.showConfirmDialog(
                new JFrame(),
                "Game over. Would you like to play again?",
                "Game Over",
                JOptionPane.YES_NO_OPTION);

        playerName = s;
        writeOnFile();
        if (choice == JOptionPane.YES_OPTION) {
            new Game().setVisible(true);
            this.setVisible(false);
        } else if (choice == JOptionPane.NO_OPTION) {
            //new Menu().setVisible(true);
            this.setVisible(false);
        }
    }

    private void addtimer() {
        if (seconds > 60) {
            seconds = 0;
            minutes += 1;
        }
    }

    private void extendTime() {
        seconds += 15;
        if (seconds > 60) {
            seconds = 0;
            minutes += 1;
        }
    }

    private void addScore() {
        checkScore();
        autoShuffle();
        if (CTR_SCORE_EVERY_10 >= 10) {
            CTR_SCORE_EVERY_10 = 0;
            System.out.println("------------>yes");
            this.extendTime();
        }
        //addtimer();
        //System.out.println(score);
        scoreField.setText(Integer.toString(score));
    }

    private void autoShuffle() {
        if (CTR_SCORE_EVERY_15 >= 15) {
            CTR_SCORE_EVERY_15 = 0;
            try {
                shufboard();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);
            }
            fillDiceWithLetters(boggleboard);
        }
    }

    private void checkScore() {
        if (guess_word.length() == 3 || guess_word.length() == 4) {
            score += 1;
            CTR_SCORE_EVERY_10++;
            CTR_SCORE_EVERY_15++;
        }
        if (guess_word.length() == 5) {
            score += 2;
            CTR_SCORE_EVERY_10 += 2;
            CTR_SCORE_EVERY_15 += 2;
        }
        if (guess_word.length() == 6) {
            score += 3;
            CTR_SCORE_EVERY_10 += 3;
            CTR_SCORE_EVERY_15 += 3;
        }
        if (guess_word.length() == 7) {
            score += 5;
            CTR_SCORE_EVERY_10 += 5;
            CTR_SCORE_EVERY_15 += 5;
        }
        if (guess_word.length() >= 8) {
            score += 11;
            CTR_SCORE_EVERY_10 += 11;
            CTR_SCORE_EVERY_15 += 11;
        }
    }

    private void printInField() {
        wordsFound = "";
        for (String s : listFound) {
            wordsFound = wordsFound.concat(s);
            wordsFound = wordsFound.concat("\n");
        }
    }

    private void formatTimer() {

        timeFormatter = new DecimalFormat("00");

        timer = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //addtimer();
                if(minutes == 0 && seconds == 9 && flag==false){
                    AudioService.loopSoundPlay(timeLeft);
                    diceHolder.removeAll();
                    diceHolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Model/Resources/thrill.gif")));
                    flag = true;
                    diceHolder.revalidate();
                    diceHolder.repaint();
                }
                else if(minutes==0 && seconds > 9 && flag == true){
                    timeLeft.stop();
                    diceHolder.removeAll();
                    diceHolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Model/Resources/Board.png")));
                    flag = false;
                    diceHolder.revalidate();
                    diceHolder.repaint();
                }
                if (milliseconds > 0) {
                    milliseconds--;
                } else {
                    if (seconds == 0 && minutes == 0) {
                        timer.stop();
                        timeLeft.stop();
                        try {
                            gameOver();
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else if (seconds > 0) {
                        seconds--;
                        milliseconds = 99;
                    } else if (minutes > 0) {
                        minutes--;
                        seconds = 59;
                        milliseconds = 99;
                    }
                }
                addtimer();
                timeRunning.setText(timeFormatter.format(minutes) + ":"
                        + timeFormatter.format(seconds) + "."
                        + timeFormatter.format(milliseconds));
            }
        });

    }
    
    private void updateWordField() {
        wordField.setText(guess_word);
    }

    private void resetAllKey() {
        chain.clear();
        A1.setEnabled(true);
        B1.setEnabled(true);
        C1.setEnabled(true);
        D1.setEnabled(true);
        A2.setEnabled(true);
        B2.setEnabled(true);
        C2.setEnabled(true);
        D2.setEnabled(true);
        A3.setEnabled(true);
        B3.setEnabled(true);
        C3.setEnabled(true);
        D3.setEnabled(true);
        A4.setEnabled(true);
        B4.setEnabled(true);
        C4.setEnabled(true);
        D4.setEnabled(true);
        A1.setSelected(false);
        B1.setSelected(false);
        C1.setSelected(false);
        D1.setSelected(false);
        A2.setSelected(false);
        B2.setSelected(false);
        C2.setSelected(false);
        D2.setSelected(false);
        A3.setSelected(false);
        B3.setSelected(false);
        C3.setSelected(false);
        D3.setSelected(false);
        A4.setSelected(false);
        B4.setSelected(false);
        C4.setSelected(false);
        D4.setSelected(false);

        for (int h = 0; h < 4; h++) {
            for (int y = 0; y < 4; y++) {
                boggleboard2[h][y].isPressed = false;
            }
        }
        guess_word = "";
        updateWordField();
    }

    private void neighborAdder() {

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                boggleboard2[i][j] = new BoggleNode();
            }
        }

        boggleboard2[0][0].addNeighbors(boggleboard2[0][1]);
        boggleboard2[0][0].addNeighbors(boggleboard2[1][0]);
        boggleboard2[0][0].addNeighbors(boggleboard2[1][1]);
        boggleboard2[0][1].addNeighbors(boggleboard2[0][0]);
        boggleboard2[0][1].addNeighbors(boggleboard2[0][2]);
        boggleboard2[0][1].addNeighbors(boggleboard2[1][0]);
        boggleboard2[0][1].addNeighbors(boggleboard2[1][1]);
        boggleboard2[0][1].addNeighbors(boggleboard2[1][2]);
        boggleboard2[0][2].addNeighbors(boggleboard2[0][1]);
        boggleboard2[0][2].addNeighbors(boggleboard2[0][3]);
        boggleboard2[0][2].addNeighbors(boggleboard2[1][1]);
        boggleboard2[0][2].addNeighbors(boggleboard2[1][2]);
        boggleboard2[0][2].addNeighbors(boggleboard2[1][3]);
        boggleboard2[0][3].addNeighbors(boggleboard2[0][2]);
        boggleboard2[0][3].addNeighbors(boggleboard2[1][2]);
        boggleboard2[0][3].addNeighbors(boggleboard2[1][3]);

        boggleboard2[1][0].addNeighbors(boggleboard2[0][0]);
        boggleboard2[1][0].addNeighbors(boggleboard2[2][0]);
        boggleboard2[1][0].addNeighbors(boggleboard2[0][1]);
        boggleboard2[1][0].addNeighbors(boggleboard2[1][1]);
        boggleboard2[1][0].addNeighbors(boggleboard2[2][1]);
        boggleboard2[1][0].addNeighbors(boggleboard2[0][0]);
        boggleboard2[1][1].addNeighbors(boggleboard2[1][0]);
        boggleboard2[1][1].addNeighbors(boggleboard2[2][0]);
        boggleboard2[1][1].addNeighbors(boggleboard2[2][1]);
        boggleboard2[1][1].addNeighbors(boggleboard2[2][2]);
        boggleboard2[1][1].addNeighbors(boggleboard2[1][2]);
        boggleboard2[1][1].addNeighbors(boggleboard2[0][2]);
        boggleboard2[1][1].addNeighbors(boggleboard2[0][1]);
        boggleboard2[1][1].addNeighbors(boggleboard2[0][0]);
        boggleboard2[1][2].addNeighbors(boggleboard2[0][1]);
        boggleboard2[1][2].addNeighbors(boggleboard2[0][2]);
        boggleboard2[1][2].addNeighbors(boggleboard2[0][3]);
        boggleboard2[1][2].addNeighbors(boggleboard2[1][3]);
        boggleboard2[1][2].addNeighbors(boggleboard2[2][3]);
        boggleboard2[1][2].addNeighbors(boggleboard2[2][2]);
        boggleboard2[1][2].addNeighbors(boggleboard2[2][1]);
        boggleboard2[1][2].addNeighbors(boggleboard2[1][1]);
        boggleboard2[1][3].addNeighbors(boggleboard2[0][3]);
        boggleboard2[1][3].addNeighbors(boggleboard2[0][2]);
        boggleboard2[1][3].addNeighbors(boggleboard2[1][2]);
        boggleboard2[1][3].addNeighbors(boggleboard2[2][2]);
        boggleboard2[1][3].addNeighbors(boggleboard2[2][3]);

        boggleboard2[2][0].addNeighbors(boggleboard2[1][0]);
        boggleboard2[2][0].addNeighbors(boggleboard2[1][1]);
        boggleboard2[2][0].addNeighbors(boggleboard2[2][1]);
        boggleboard2[2][0].addNeighbors(boggleboard2[3][1]);
        boggleboard2[2][0].addNeighbors(boggleboard2[3][0]);
        boggleboard2[2][1].addNeighbors(boggleboard2[1][0]);
        boggleboard2[2][1].addNeighbors(boggleboard2[1][1]);
        boggleboard2[2][1].addNeighbors(boggleboard2[1][2]);
        boggleboard2[2][1].addNeighbors(boggleboard2[2][2]);
        boggleboard2[2][1].addNeighbors(boggleboard2[3][2]);
        boggleboard2[2][1].addNeighbors(boggleboard2[3][1]);
        boggleboard2[2][1].addNeighbors(boggleboard2[3][0]);
        boggleboard2[2][1].addNeighbors(boggleboard2[2][0]);
        boggleboard2[2][2].addNeighbors(boggleboard2[2][1]);
        boggleboard2[2][2].addNeighbors(boggleboard2[1][1]);
        boggleboard2[2][2].addNeighbors(boggleboard2[1][2]);
        boggleboard2[2][2].addNeighbors(boggleboard2[1][3]);
        boggleboard2[2][2].addNeighbors(boggleboard2[2][3]);
        boggleboard2[2][2].addNeighbors(boggleboard2[3][3]);
        boggleboard2[2][2].addNeighbors(boggleboard2[3][2]);
        boggleboard2[2][2].addNeighbors(boggleboard2[3][1]);
        boggleboard2[2][3].addNeighbors(boggleboard2[1][3]);
        boggleboard2[2][3].addNeighbors(boggleboard2[1][2]);
        boggleboard2[2][3].addNeighbors(boggleboard2[2][2]);
        boggleboard2[2][3].addNeighbors(boggleboard2[3][2]);
        boggleboard2[2][3].addNeighbors(boggleboard2[3][3]);

        boggleboard2[3][0].addNeighbors(boggleboard2[2][0]);
        boggleboard2[3][0].addNeighbors(boggleboard2[2][1]);
        boggleboard2[3][0].addNeighbors(boggleboard2[3][1]);
        boggleboard2[3][1].addNeighbors(boggleboard2[3][0]);
        boggleboard2[3][1].addNeighbors(boggleboard2[2][0]);
        boggleboard2[3][1].addNeighbors(boggleboard2[2][2]);
        boggleboard2[3][1].addNeighbors(boggleboard2[3][2]);
        boggleboard2[3][1].addNeighbors(boggleboard2[2][1]);
        boggleboard2[3][2].addNeighbors(boggleboard2[3][1]);
        boggleboard2[3][2].addNeighbors(boggleboard2[2][1]);
        boggleboard2[3][2].addNeighbors(boggleboard2[2][2]);
        boggleboard2[3][2].addNeighbors(boggleboard2[2][3]);
        boggleboard2[3][2].addNeighbors(boggleboard2[3][3]);
        boggleboard2[3][3].addNeighbors(boggleboard2[3][2]);
        boggleboard2[3][3].addNeighbors(boggleboard2[2][2]);
        boggleboard2[3][3].addNeighbors(boggleboard2[2][3]);

    }

    private void turnOffButtonsActivated(BoggleNode activated) {
        for (int i = 0; i < activated.neighbors.size(); i++) {
            if (activated.isNeighbor(boggleboard2[0][0]) == false && boggleboard2[0][0].IsPressed() == false && boggleboard2[0][0] != activated) {
                A1.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[0][1]) == false && boggleboard2[0][1].IsPressed() == false && boggleboard2[0][1] != activated) {
                A2.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[0][2]) == false && boggleboard2[0][2].IsPressed() == false && boggleboard2[0][2] != activated) {
                A3.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[0][3]) == false && boggleboard2[0][3].IsPressed() == false && boggleboard2[0][3] != activated) {
                A4.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[1][0]) == false && boggleboard2[1][0].IsPressed() == false && boggleboard2[1][0] != activated) {
                B1.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[1][1]) == false && boggleboard2[1][1].IsPressed() == false && boggleboard2[1][1] != activated) {
                B2.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[1][2]) == false && boggleboard2[1][2].IsPressed() == false && boggleboard2[1][2] != activated) {
                B3.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[1][3]) == false && boggleboard2[1][3].IsPressed() == false && boggleboard2[1][3] != activated) {
                B4.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[2][0]) == false && boggleboard2[2][0].IsPressed() == false && boggleboard2[2][0] != activated) {
                C1.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[2][1]) == false && boggleboard2[2][1].IsPressed() == false && boggleboard2[2][1] != activated) {
                C2.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[2][2]) == false && boggleboard2[2][2].IsPressed() == false && boggleboard2[2][2] != activated) {
                C3.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[2][3]) == false && boggleboard2[2][3].IsPressed() == false && boggleboard2[2][3] != activated) {
                C4.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[3][0]) == false && boggleboard2[3][0].IsPressed() == false && boggleboard2[3][0] != activated) {
                D1.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[3][1]) == false && boggleboard2[3][1].IsPressed() == false && boggleboard2[3][1] != activated) {
                D2.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[3][2]) == false && boggleboard2[3][2].IsPressed() == false && boggleboard2[3][2] != activated) {
                D3.setEnabled(false);
            }
            if (activated.isNeighbor(boggleboard2[3][3]) == false && boggleboard2[3][3].IsPressed() == false && boggleboard2[3][3] != activated) {
                D4.setEnabled(false);
            }
            //
            if (activated.isNeighbor(boggleboard2[0][0])) {
                A1.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[0][1])) {
                A2.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[0][2])) {
                A3.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[0][3])) {
                A4.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[1][0])) {
                B1.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[1][1])) {
                B2.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[1][2])) {
                B3.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[1][3])) {
                B4.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[2][0])) {
                C1.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[2][1])) {
                C2.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[2][2])) {
                C3.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[2][3])) {
                C4.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[3][0])) {
                D1.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[3][1])) {
                D2.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[3][2])) {
                D3.setEnabled(true);
            }
            if (activated.isNeighbor(boggleboard2[3][3])) {
                D4.setEnabled(true);
            }
        }
    }

    public void fileRead() throws FileNotFoundException{
        String _path = "src/Model/Dictionary/dictionary";
        reference = new Dictionary(_path);
    }
    
    private void createBoggleBoard() throws FileNotFoundException {

        diceset = new ClassicDiceSet();
        boolean tracker[][] = new boolean[4][4];

        this.bogglesolver = new BoggleSolver(reference);
        this.boggleboard = new BoggleBoard(diceset);
        boggleboard.generateBoard();
        boardWords.clear();
        findWords(tracker);
    }

    private void shufboard() throws FileNotFoundException {
        diceset = new ClassicDiceSet();
        boolean tracker[][] = new boolean[4][4];
        this.bogglesolver = new BoggleSolver(reference);
        this.boggleboard = new BoggleBoard(diceset);
        boggleboard.generateBoard();
        boardWords.clear();
        findWords(tracker);
    }

    private void fillDiceWithLetters(BoggleBoard boggleboard) {
        A1.setText(boggleboard.getBoard()[0][0]);
        A2.setText(boggleboard.getBoard()[1][0]);
        A3.setText(boggleboard.getBoard()[2][0]);
        A4.setText(boggleboard.getBoard()[3][0]);
        B1.setText(boggleboard.getBoard()[0][1]);
        B2.setText(boggleboard.getBoard()[1][1]);
        B3.setText(boggleboard.getBoard()[2][1]);
        B4.setText(boggleboard.getBoard()[3][1]);
        C1.setText(boggleboard.getBoard()[0][2]);
        C2.setText(boggleboard.getBoard()[1][2]);
        C3.setText(boggleboard.getBoard()[2][2]);
        C4.setText(boggleboard.getBoard()[3][2]);
        D1.setText(boggleboard.getBoard()[0][3]);
        D2.setText(boggleboard.getBoard()[1][3]);
        D3.setText(boggleboard.getBoard()[2][3]);
        D4.setText(boggleboard.getBoard()[3][3]);
    }

    private void letterConcatinator(String letter) {
        guess_word = guess_word.concat(letter);
    }

    private void letterDeconcatinator(BoggleNode decon) {

        int tmp = chain.size() - 1;
        int copyoftmp;
        int tmp2 = chain.indexOf(decon);
        String toberemoved = new String();
        while (tmp >= tmp2) {
            if (chain.get(tmp) == boggleboard2[0][0]) {
                A1.setSelected(false);
                boggleboard2[0][0].isPressed = false;
                toberemoved = toberemoved + A1.getText();
                turnOffButtonsActivated(boggleboard2[0][0]);
            }
            if (chain.get(tmp) == boggleboard2[0][1]) {
                A2.setSelected(false);
                boggleboard2[0][1].isPressed = false;
                toberemoved = toberemoved + A2.getText();
                turnOffButtonsActivated(boggleboard2[0][1]);
            }
            if (chain.get(tmp) == boggleboard2[0][2]) {
                A3.setSelected(false);
                boggleboard2[0][2].isPressed = false;
                toberemoved = toberemoved + A3.getText();
                turnOffButtonsActivated(boggleboard2[0][2]);
            }
            if (chain.get(tmp) == boggleboard2[0][3]) {
                A4.setSelected(false);
                boggleboard2[0][3].isPressed = false;
                toberemoved = toberemoved + A4.getText();
                turnOffButtonsActivated(boggleboard2[0][3]);
            }
            if (chain.get(tmp) == boggleboard2[1][0]) {
                B1.setSelected(false);
                boggleboard2[1][0].isPressed = false;
                toberemoved = toberemoved + B1.getText();
                turnOffButtonsActivated(boggleboard2[1][0]);
            }
            if (chain.get(tmp) == boggleboard2[1][1]) {
                B2.setSelected(false);
                boggleboard2[1][1].isPressed = false;
                toberemoved = toberemoved + B2.getText();
                turnOffButtonsActivated(boggleboard2[1][1]);
            }
            if (chain.get(tmp) == boggleboard2[1][2]) {
                B3.setSelected(false);
                boggleboard2[1][2].isPressed = false;
                toberemoved = toberemoved + B3.getText();
                turnOffButtonsActivated(boggleboard2[1][2]);
            }
            if (chain.get(tmp) == boggleboard2[1][3]) {
                B4.setSelected(false);
                boggleboard2[1][3].isPressed = false;
                toberemoved = toberemoved + B4.getText();
                turnOffButtonsActivated(boggleboard2[1][3]);
            }
            if (chain.get(tmp) == boggleboard2[2][0]) {
                C1.setSelected(false);
                boggleboard2[2][0].isPressed = false;
                toberemoved = toberemoved + C1.getText();
                turnOffButtonsActivated(boggleboard2[2][0]);
            }
            if (chain.get(tmp) == boggleboard2[2][1]) {
                C2.setSelected(false);
                boggleboard2[2][1].isPressed = false;
                toberemoved = toberemoved + C2.getText();
                turnOffButtonsActivated(boggleboard2[2][1]);
            }
            if (chain.get(tmp) == boggleboard2[2][2]) {
                C3.setSelected(false);
                boggleboard2[2][2].isPressed = false;
                toberemoved = toberemoved + C3.getText();
                turnOffButtonsActivated(boggleboard2[2][2]);
            }
            if (chain.get(tmp) == boggleboard2[2][3]) {
                C4.setSelected(false);
                boggleboard2[2][3].isPressed = false;
                toberemoved = toberemoved + C4.getText();
                turnOffButtonsActivated(boggleboard2[2][3]);
            }
            if (chain.get(tmp) == boggleboard2[3][0]) {
                D1.setSelected(false);
                boggleboard2[3][0].isPressed = false;
                toberemoved = toberemoved + D1.getText();
                turnOffButtonsActivated(boggleboard2[3][0]);
            }
            if (chain.get(tmp) == boggleboard2[3][1]) {
                D2.setSelected(false);
                boggleboard2[3][1].isPressed = false;
                toberemoved = toberemoved + D2.getText();
                turnOffButtonsActivated(boggleboard2[3][1]);
            }
            if (chain.get(tmp) == boggleboard2[3][2]) {
                D3.setSelected(false);
                boggleboard2[3][2].isPressed = false;
                toberemoved = toberemoved + D3.getText();
                turnOffButtonsActivated(boggleboard2[3][2]);
            }
            if (chain.get(tmp) == boggleboard2[3][3]) {
                D4.setSelected(false);
                boggleboard2[3][3].isPressed = false;
                toberemoved = toberemoved + D4.getText();
                turnOffButtonsActivated(boggleboard2[3][3]);
            }
            chain.remove(tmp);
            tmp--;
        }

        int ge = toberemoved.length();

        StringBuilder gee = new StringBuilder(guess_word);
        gee.delete(guess_word.length() - ge, guess_word.length());
        guess_word = gee.toString();

        copyoftmp = tmp;
        if (!chain.isEmpty()) {
            if (chain.get(copyoftmp) == boggleboard2[0][0]) {
                turnOffButtonsActivated(boggleboard2[0][0]);
            }
            if (chain.get(copyoftmp) == boggleboard2[0][1]) {
                turnOffButtonsActivated(boggleboard2[0][1]);
            }
            if (chain.get(copyoftmp) == boggleboard2[0][2]) {
                turnOffButtonsActivated(boggleboard2[0][2]);
            }
            if (chain.get(copyoftmp) == boggleboard2[0][3]) {
                turnOffButtonsActivated(boggleboard2[0][3]);
            }
            if (chain.get(copyoftmp) == boggleboard2[1][0]) {
                turnOffButtonsActivated(boggleboard2[1][0]);
            }
            if (chain.get(copyoftmp) == boggleboard2[1][1]) {
                turnOffButtonsActivated(boggleboard2[1][1]);
            }
            if (chain.get(copyoftmp) == boggleboard2[1][2]) {
                turnOffButtonsActivated(boggleboard2[1][2]);
            }
            if (chain.get(copyoftmp) == boggleboard2[1][3]) {
                turnOffButtonsActivated(boggleboard2[1][3]);
            }
            if (chain.get(copyoftmp) == boggleboard2[2][0]) {
                turnOffButtonsActivated(boggleboard2[2][0]);
            }
            if (chain.get(copyoftmp) == boggleboard2[2][1]) {
                turnOffButtonsActivated(boggleboard2[2][1]);
            }
            if (chain.get(copyoftmp) == boggleboard2[2][2]) {
                turnOffButtonsActivated(boggleboard2[2][2]);
            }
            if (chain.get(copyoftmp) == boggleboard2[2][3]) {
                turnOffButtonsActivated(boggleboard2[2][3]);
            }
            if (chain.get(copyoftmp) == boggleboard2[3][0]) {
                turnOffButtonsActivated(boggleboard2[3][0]);
            }
            if (chain.get(copyoftmp) == boggleboard2[3][1]) {
                turnOffButtonsActivated(boggleboard2[3][1]);
            }
            if (chain.get(copyoftmp) == boggleboard2[3][2]) {
                turnOffButtonsActivated(boggleboard2[3][2]);
            }
            if (chain.get(copyoftmp) == boggleboard2[3][3]) {
                turnOffButtonsActivated(boggleboard2[3][3]);
            }
        }

        if (chain.isEmpty()) {
            resetAllKey();
        }

        updateWordField();
    }

    private void findWords(boolean[][] tracker) throws FileNotFoundException {
        for (String s : bogglesolver.loop(boggleboard, tracker, String.valueOf(boggleboard.getBoard()[0][0]), result)) {
            boardWords.add(s);
            //System.out.println(s);
        }
    }

    private boolean checkWord() {
        CheckAnswers checkthis = new CheckAnswers(boardWords);
        return checkthis.checkInList(guess_word);
    }

    private String recordScore() {
        StringBuilder HSPost = new StringBuilder();
        HSPost.append(playerName).append(" -> ").append(" ");
        HSPost.append(score);
        return HSPost.toString();
    }

    public void invokeStart(){
        timer.start();
        //AudioService.
        diceHolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Model/Resources/Board.png")));
    }
    
    public void resetTimer(){
        milliseconds = 0;
        seconds = 0;
        minutes = 2;
    }
    
    private void writeOnFile() throws FileNotFoundException {
        File highScores = new File("src/Model/Resources/highScores.txt");
        try {
            // FileOutputStream is = new FileOutputStream(highScores);
            // OutputStreamWriter osw = new OutputStreamWriter(is);    
            // Writer w = new BufferedWriter(osw);
            FileWriter fw = new FileWriter(highScores.getAbsoluteFile(), true);
            fw.write(recordScore() + "\n");
            fw.close();
        } catch (IOException e) {
            System.err.println("Problem writing to the file highScore.txt");
        }
    }
    
    public void stopThreads(){
        timer.stop();
        timeLeft.stop();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton A1;
    private javax.swing.JToggleButton A2;
    private javax.swing.JToggleButton A3;
    private javax.swing.JToggleButton A4;
    private javax.swing.JToggleButton B1;
    private javax.swing.JToggleButton B2;
    private javax.swing.JToggleButton B3;
    private javax.swing.JToggleButton B4;
    private javax.swing.JToggleButton C1;
    private javax.swing.JToggleButton C2;
    private javax.swing.JToggleButton C3;
    private javax.swing.JToggleButton C4;
    private javax.swing.JToggleButton D1;
    private javax.swing.JToggleButton D2;
    private javax.swing.JToggleButton D3;
    private javax.swing.JToggleButton D4;
    private javax.swing.JTextArea Words;
    private javax.swing.JLabel diceHolder;
    private javax.swing.JButton hintButton;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel menuBG;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextField scoreField;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JButton shuffleButton;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel timeRunning;
    private javax.swing.JButton tryWord;
    private javax.swing.JTextField wordField;
    private javax.swing.JScrollPane wordPane;
    // End of variables declaration//GEN-END:variables
}
